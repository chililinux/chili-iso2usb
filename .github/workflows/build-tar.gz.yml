name: Criar release e arquivo .tar.gz

# Gatilhos para o workflow
on:
  push:
    branches:
      - main

  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: "With TMATE"
        required: false
        default: false

  # Uncomment and adjust the cron expression to schedule the workflow
  # schedule:
  #   - cron: '0 5 * * 5'

  repository_dispatch: # Permite a execução através de eventos de webhook
    types:
      - webhook
      - "**"

jobs:
  get-time:
    runs-on: ubuntu-latest
    outputs:
      time: ${{ steps.time.outputs.time }}
    steps:
      - name: Obter a hora atual
        id: time
        run: echo "time=$(date +'%Y.%m.%d-%H%M')" >> $GITHUB_ENV

  set-repo-name:
    runs-on: ubuntu-latest
    outputs:
      REPOSITORY_NAME: ${{ steps.get-repo-name.outputs.repo_name }}
    steps:
      - name: Obter nome do repositório
        id: get-repo-name
        run: echo "repo_name=$(basename $GITHUB_REPOSITORY)" >> $GITHUB_ENV

  prepare-release:
    runs-on: ubuntu-20.04
    needs: [get-time, set-repo-name]
    env:
      REPO_NAME: ${{ needs.set-repo-name.outputs.REPOSITORY_NAME }}
    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Criar arquivo .tar.gz
        run: tar -czf ${{ env.REPO_NAME }}.tar.gz .

      - name: Salvar arquivo .tar.gz como artefato
        uses: actions/upload-artifact@v3
        with:
          name: arquivos
          path: ${{ env.REPO_NAME }}.tar.gz

      - name: Criar release
        id: create_release
        uses: actions/create-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.get-time.outputs.time }}
          release_name: Release ${{ needs.get-time.outputs.time }}
          body: |
            Descrição do release aqui.
          draft: false
          prerelease: false

      - name: Fazer upload do arquivo .tar.gz no release
        id: upload-release-asset
        uses: actions/upload-release-asset@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.REPO_NAME }}.tar.gz
          asset_name: ${{ env.REPO_NAME }}.tar.gz
          asset_content_type: application/gzip
